package com.leetftw.tech_mod.client.render.block;

import com.leetftw.tech_mod.LeetTechMod;
import com.leetftw.tech_mod.block.entity.EnergyStorageBlockEntity;
import com.leetftw.tech_mod.client.render.RetexturedBakedQuad;
import com.mojang.blaze3d.systems.RenderSystem;
import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import com.mojang.math.Axis;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.block.BlockRenderDispatcher;
import net.minecraft.client.renderer.block.model.BakedQuad;
import net.minecraft.client.renderer.blockentity.BlockEntityRendererProvider;
import net.minecraft.client.renderer.texture.TextureAtlasSprite;
import net.minecraft.client.resources.model.BakedModel;
import net.minecraft.core.Direction;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.client.renderer.blockentity.BlockEntityRenderer;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.util.RandomSource;
import net.neoforged.neoforge.client.extensions.IBakedModelExtension;
import org.joml.Matrix4f;
import org.joml.Vector3f;

public class EnergyStorageBlockEntityRenderer implements BlockEntityRenderer<EnergyStorageBlockEntity>
{
    private static final ResourceLocation BASE_TEXTURE_SIDES = ResourceLocation.fromNamespaceAndPath(LeetTestMod.MODID, "block/aesthetic_block");
    private static final ResourceLocation BASE_TEXTURE_TOP = ResourceLocation.fromNamespaceAndPath(LeetTestMod.MODID, "textures/block/example_block.png");
    private static final ResourceLocation OVERLAY_TEXTURE_ON = ResourceLocation.fromNamespaceAndPath(LeetTestMod.MODID, "gui/sprites/container/common/rf_on.png");
    private static final ResourceLocation OVERLAY_TEXTURE_OFF = ResourceLocation.fromNamespaceAndPath(LeetTestMod.MODID, "gui/sprites/container/common/rf_off.png");

    public EnergyStorageBlockEntityRenderer(BlockEntityRendererProvider.Context ctx) {
        // Do things here
    }

    @Override
    public void render(EnergyStorageBlockEntity energyStorageBlockEntity, float partialTick, PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, int packedOverlay)
    {
        // Render base texture
        //RenderSystem.setShaderTexture(0, BASE_TEXTURE_SIDES);
        /*renderQuadAllSides2D(poseStack, bufferSource, BASE_TEXTURE_SIDES,
                0,0, // Bottom-left
                1.0f, 0.0f, // Bottom-right
                1.0f, 1.0f, // Top-right
                0.0f, 1.0f, // Top-left
                packedLight, packedOverlay, 1f);*/
        RandomSource source = RandomSource.create();
        BlockRenderDispatcher modelRenderer = Minecraft.getInstance().getBlockRenderer();

        BakedModel model = modelRenderer.getBlockModel(energyStorageBlockEntity.getBlockState());

        TextureAtlasSprite sprite = Minecraft.getInstance().getTextureAtlas(ResourceLocation.fromNamespaceAndPath("minecraft", "textures/atlas/blocks.png")).apply(BASE_TEXTURE_SIDES);
        model = new RetexturedBakedQuad(model, BASE_TEXTURE_SIDES);



        VertexConsumer buffer = bufferSource.getBuffer(RenderType.SOLID);

        for (Direction direction : Direction.values())
        {
            source.setSeed(42L);
            for (BakedQuad quad : model.getQuads(energyStorageBlockEntity.getBlockState(), direction, source))
            {
                buffer.putBulkData(poseStack.last(), quad, 1, 1, 1, 1, packedLight, packedOverlay);
            }
        }
        //modelRenderer.renderSingleBlock(entity.getBlockPos(), energyStorageBlockEntity.getModelData(), null, matrixStack, buffer.getBuffer(RenderType.solid()), light, overlay);

        /*
        // Render off overlay
        RenderSystem.enableBlend();
        RenderSystem.defaultBlendFunc();
        RenderSystem.setShaderTexture(0, OVERLAY_TEXTURE_OFF);
        renderSides(poseStack, bufferSource, OVERLAY_TEXTURE_OFF, packedLight, packedOverlay, 0.0f);
        RenderSystem.disableBlend();

        // Render on overlay


        // Render overlay based on state
        */
    }

    public static void renderQuadAllSides2D(PoseStack poseStack,
                                            MultiBufferSource bufferSource,
                                            ResourceLocation texture,
                                            float x1, float y1, // Bottom-left 2D corner
                                            float x2, float y2, // Bottom-right 2D corner
                                            float x3, float y3, // Top-right 2D corner
                                            float x4, float y4, // Top-left 2D corner
                                            int light, int overlay, float alpha)
    {
        //renderQuad2D(poseStack, bufferSource, texture, x1, y1, x2, y2, x3, y3, x4, y4, Direction.UP, light, overlay, alpha);
        //renderQuad2D(poseStack, bufferSource, texture, x1, y1, x2, y2, x3, y3, x4, y4, Direction.EAST, light, overlay, alpha);
        //renderQuad2D(poseStack, bufferSource, texture, x1, y1, x2, y2, x3, y3, x4, y4, Direction.WEST, light, overlay, alpha);
        renderQuad2D(poseStack, bufferSource, texture, x1, y1, x2, y2, x3, y3, x4, y4, Direction.NORTH, light, overlay, alpha);
        //renderQuad2D(poseStack, bufferSource, texture, x1, y1, x2, y2, x3, y3, x4, y4, Direction.SOUTH, light, overlay, alpha);
        //renderQuad2D(poseStack, bufferSource, texture, x1, y1, x2, y2, x3, y3, x4, y4, Direction.DOWN, light, overlay, alpha);
    }

    public static void renderQuad2D(
            PoseStack poseStack,
            MultiBufferSource bufferSource,
            ResourceLocation texture,
            float x1, float y1, // Bottom-left 2D corner
            float x2, float y2, // Bottom-right 2D corner
            float x3, float y3, // Top-right 2D corner
            float x4, float y4, // Top-left 2D corner
            Direction direction, // Which face to render the quad on
            int light, int overlay, float alpha)
    {
        float normalX = 0, normalY = 0, normalZ = 0;

        VertexConsumer buffer = bufferSource.getBuffer(RenderType.SOLID);

        // Push transformation for this quad
        poseStack.pushPose();

        // Align quad based on the direction
        switch (direction) {
            case NORTH:
                normalZ = -1; // Facing the negative Z-axis
                break;
            case SOUTH:
                poseStack.translate(0, 0, -1);
                poseStack.mulPose(Axis.YP.rotationDegrees(180));
                normalZ = 1; // Facing the positive Z-axis
                break;
            case EAST:
                poseStack.translate(1, 0, 0);
                poseStack.mulPose(Axis.YP.rotationDegrees(-90));
                normalX = 1; // Facing the positive X-axis
                break;
            case WEST:
                poseStack.translate(-1, 0, 0);
                poseStack.mulPose(Axis.YP.rotationDegrees(90));
                normalX = -1; // Facing the negative X-axis
                break;
            case UP:
                poseStack.translate(0, 1, 0);
                poseStack.mulPose(Axis.XP.rotationDegrees(-90));
                normalY = 1; // Facing the positive Y-axis
                break;
            case DOWN:
                poseStack.mulPose(Axis.XP.rotationDegrees(90));
                normalY = -1; // Facing the negative Y-axis
                break;
        }

        // Render the quad (UV coordinates correspond to (0, 0) -> (1, 1))
        Matrix4f matrix = poseStack.last().pose();
        buffer.addVertex(matrix, x1, y1, 0.0f).setUv(0.0f, 0.0f).setNormal(normalX, normalY, normalZ).setColor(1, 1, 1, alpha).setLight(light).setOverlay(overlay); // Bottom-left
        buffer.addVertex(matrix, x2, y2, 0.0f).setUv(1.0f, 0.0f).setNormal(normalX, normalY, normalZ).setColor(1, 1, 1, alpha).setLight(light).setOverlay(overlay); // Bottom-right
        buffer.addVertex(matrix, x3, y3, 0.0f).setUv(1.0f, 1.0f).setNormal(normalX, normalY, normalZ).setColor(1, 1, 1, alpha).setLight(light).setOverlay(overlay); // Top-right
        buffer.addVertex(matrix, x4, y4, 0.0f).setUv(0.0f, 1.0f).setNormal(normalX, normalY, normalZ).setColor(1, 1, 1, alpha).setLight(light).setOverlay(overlay); // Top-left

        // Pop transformation
        poseStack.popPose();
    }
}
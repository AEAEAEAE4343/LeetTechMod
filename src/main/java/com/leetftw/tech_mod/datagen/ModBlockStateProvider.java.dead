package com.leetftw.tech_mod.datagen;

import com.leetftw.tech_mod.LeetTechMod;
import com.leetftw.tech_mod.block.EnergyStorageBlock;
import com.leetftw.tech_mod.block.ModBlocks;
import com.leetftw.tech_mod.block.multiblock.StaticMultiBlockPart;
import com.leetftw.tech_mod.block.multiblock.quarry.QuarryFrameBlock;
import net.minecraft.client.data.models.BlockModelGenerators;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.data.PackOutput;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.util.RandomSource;
import net.minecraft.world.item.ItemDisplayContext;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.properties.BlockStateProperties;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType;
import net.neoforged.neoforge.client.model.generators.*;
import net.neoforged.neoforge.registries.DeferredBlock;

public class ModBlockStateProvider extends BlockModelGenerators
{
    public ModBlockStateProvider(PackOutput output, ExistingFileHelper exFileHelper)
    {
        super(output, LeetTechMod.MOD_ID, exFileHelper);
    }

    private <T extends Block> void energyCell(DeferredBlock<T> block)
    {
        VariantBlockStateBuilder variantBuilder = getVariantBuilder(block.get());
        variantBuilder.forAllStates(state ->
                ConfiguredModel.builder()
                        .modelFile(this.models()
                                .orientable(block.getId().getPath() + "_front_" + state.getValue(EnergyStorageBlock.FILL_STATE),
                                        ResourceLocation.fromNamespaceAndPath(LeetTechMod.MOD_ID, "block/" + block.getId().getPath() + "_side"),
                                        ResourceLocation.fromNamespaceAndPath(LeetTechMod.MOD_ID, "block/" + block.getId().getPath() + "_front_" + state.getValue(EnergyStorageBlock.FILL_STATE)),
                                        ResourceLocation.fromNamespaceAndPath(LeetTechMod.MOD_ID, "block/"+ block.getId().getPath() + "_side")))
                        .rotationY(((int)(state.getValue(BlockStateProperties.HORIZONTAL_FACING)).toYRot() + 180) % 360)
                        .build());
    }

    @Override
    protected void registerStatesAndModels()
    {
        ResourceLocation quarryFrameBase = modLoc("block/quarry_frame_base");
        ResourceLocation quarryFrameExtension = modLoc("block/quarry_frame_extension");
        MultiPartBlockStateBuilder multipartBuilder = this.getMultipartBuilder(ModBlocks.QUARRY_FRAME.get());
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameBase))
                .addModel()
                .condition(StaticMultiBlockPart.FORMED, false)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension))
                .addModel()
                .condition(QuarryFrameBlock.NORTH_CON, true)
                .condition(StaticMultiBlockPart.FORMED, false)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension))
                .rotationY(90)
                .addModel()
                .condition(QuarryFrameBlock.EAST_CON, true)
                .condition(StaticMultiBlockPart.FORMED, false)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension))
                .rotationY(180)
                .addModel()
                .condition(QuarryFrameBlock.SOUTH_CON, true)
                .condition(StaticMultiBlockPart.FORMED, false)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension))
                .rotationY(-90)
                .addModel()
                .condition(QuarryFrameBlock.WEST_CON, true)
                .condition(StaticMultiBlockPart.FORMED, false)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension))
                .rotationX(-90)
                .addModel()
                .condition(QuarryFrameBlock.UP_CON, true)
                .condition(StaticMultiBlockPart.FORMED, false)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension))
                .rotationX(90)
                .addModel()
                .condition(QuarryFrameBlock.DOWN_CON, true)
                .condition(StaticMultiBlockPart.FORMED, false)
                .end();

        // TODO: REMOVE THIS
        //       THIS ONLY EXISTS FOR DEBUGGING PURPOSES
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameBase.withSuffix("_formed")))
                .addModel()
                .condition(StaticMultiBlockPart.FORMED, true)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension.withSuffix("_formed")))
                .addModel()
                .condition(QuarryFrameBlock.NORTH_CON, true)
                .condition(StaticMultiBlockPart.FORMED, true)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension.withSuffix("_formed")))
                .rotationY(90)
                .addModel()
                .condition(QuarryFrameBlock.EAST_CON, true)
                .condition(StaticMultiBlockPart.FORMED, true)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension.withSuffix("_formed")))
                .rotationY(180)
                .addModel()
                .condition(QuarryFrameBlock.SOUTH_CON, true)
                .condition(StaticMultiBlockPart.FORMED, true)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension.withSuffix("_formed")))
                .rotationY(-90)
                .addModel()
                .condition(QuarryFrameBlock.WEST_CON, true)
                .condition(StaticMultiBlockPart.FORMED, true)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension.withSuffix("_formed")))
                .rotationX(-90)
                .addModel()
                .condition(QuarryFrameBlock.UP_CON, true)
                .condition(StaticMultiBlockPart.FORMED, true)
                .end();
        multipartBuilder.part()
                .modelFile(models().getExistingFile(quarryFrameExtension.withSuffix("_formed")))
                .rotationX(90)
                .addModel()
                .condition(QuarryFrameBlock.DOWN_CON, true)
                .condition(StaticMultiBlockPart.FORMED, true)
                .end();

        ResourceLocation itemGenerated = ResourceLocation.fromNamespaceAndPath("minecraft", "item/generated");
        itemModels().withExistingParent("aesthetic_bud", itemGenerated)
                .transforms()
                .transform(ItemDisplayContext.FIRST_PERSON_RIGHT_HAND)
                .rotation(0, -90, 25)
                .translation(0, 6, 0)
                .scale(0.68f, 0.68f ,0.68f)
                .end().transform(ItemDisplayContext.FIXED)
                .translation(0, 7, 0)
                .end().transform(ItemDisplayContext.HEAD)
                .translation(0, 14, -5)
                .end().transform(ItemDisplayContext.GUI)
                .translation(0, 2, 0)
                .end()
                .end();

        simpleBlockWithItemCross(ModBlocks.SMALL_AESTHETIC_BUD);
        itemModels().withExistingParent(ModBlocks.SMALL_AESTHETIC_BUD_ITEM.getId().getPath(),
                ResourceLocation.fromNamespaceAndPath(LeetTechMod.MOD_ID, "aesthetic_bud"))
                .texture("layer0", ModBlocks.SMALL_AESTHETIC_BUD.getId().withPrefix("block/"));

        simpleBlockWithItemCross(ModBlocks.MEDIUM_AESTHETIC_BUD);
        itemModels().withExistingParent(ModBlocks.MEDIUM_AESTHETIC_BUD_ITEM.getId().getPath(),
                ResourceLocation.fromNamespaceAndPath(LeetTechMod.MOD_ID, "aesthetic_bud"))
                .texture("layer0", ModBlocks.MEDIUM_AESTHETIC_BUD.getId().withPrefix("block/"));

        simpleBlockWithItemCross(ModBlocks.LARGE_AESTHETIC_BUD);
        itemModels().withExistingParent(ModBlocks.LARGE_AESTHETIC_BUD_ITEM.getId().getPath(),
                ResourceLocation.fromNamespaceAndPath(LeetTechMod.MOD_ID, "aesthetic_bud"))
                .texture("layer0", ModBlocks.LARGE_AESTHETIC_BUD.getId().withPrefix("block/"));

        simpleBlockWithItemCross(ModBlocks.AESTHETIC_CLUSTER);
        itemModels().withExistingParent(ModBlocks.AESTHETIC_ClUSTER_ITEM.getId().getPath(), itemGenerated)
                .texture("layer0", ModBlocks.AESTHETIC_CLUSTER.getId().withPrefix("block/"))
                .transforms()
                .transform(ItemDisplayContext.HEAD)
                .translation(0, 14, -5)
                .end()
                .end();

        //simpleBlock(ModBlocks.LIQUID_AESTHETIC_BLOCK.get(), models().singleTexture());
    }

    private void simpleBlockWithItemCross(DeferredBlock<?> deferredBlock)
    {
        ResourceLocation resource = deferredBlock.getId();
        ModelFile model = models().cross(resource.getPath(), resource.withPrefix("block/")).renderType("cutout");
        directionalBlock(deferredBlock.get(), model);
    }

    private void simpleBlockWithItemCubeAll(DeferredBlock<?> deferredBlock)
    {
        simpleBlock(deferredBlock.get(), cubeAll(deferredBlock.get()));
    }

    @Override
    protected BlockStateProviderType<?> type()
    {
        return BlockStateProviderType.SIMPLE_STATE_PROVIDER;
    }

    @Override
    public BlockState getState(RandomSource randomSource, BlockPos blockPos)
    {
        return null;
    }
}
